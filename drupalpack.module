<?php
/**
 * Provide default hook implementations and other code for webpack
 * delivered assets.
 */

/**
 * The place where generated files will be written.
 */
function drupalpack_get_destination_dir() {
  global $theme;
  $active_theme = variable_get('theme_default', 'bartik');
  if(is_dir(drupal_get_path('theme', $active_theme) . '/dist') && ($theme === $active_theme)) {
    return drupal_get_path('theme', $active_theme) . '/dist';
  }
  return FALSE;
}
/**
 * Implements hook_page_alter().
 *
 * This hook implementation serves as the merge point for all default (i.e. index.js)
 * scripts. Modules which define a file named index.js will have this file included
 * on all page loads by default.
 *
 * @param $page array
 *  A renderable array representing the current page.
 *
 */
function drupalpack_page_alter(&$page) {
  if(!$dir = drupalpack_get_destination_dir()) {
    watchdog(
      'drupalpack',
      'Missing @w destination files dir',
      array('@w' => 'Webpack'),
      WATCHDOG_WARNING
    );
    return;
  }
  
  $files = file_scan_directory($dir, '/.*\.js|,*\.css$/', array('recurse' => TRUE));
  foreach($files as $uri => $file) {
    $info = pathinfo($uri);
    if($info['basename'] === 'app.js') {
      $page['footer']['#attached']['js'][] = array(
        'data' => file_create_url($uri),
      );
    }
    if($info['basename'] === 'app.css') {
      $page['header']['#attached']['css'][] = array(
        'data' => $uri,
        'type' => 'file',
      );
    }
  }
}

/**
 * Implements hook_preprocess().
 *
 * Preprocess all theme function to scan for CSS/JS files to include.
 *
 * @param $variables
 */
function drupalpack_preprocess(&$variables) {
  $hookdata =& drupal_static(__FUNCTION__);
  if(!$hookdata) {
    $cache = cache_get(__FUNCTION__);
    $hookdata = $cache ? $cache->data ?: [] : [];
  }
  $updatecache = FALSE;
  $scripts[$variables['theme_hook_original']] = array();
  $styles[$variables['theme_hook_original']] = array();
  $hooks = array_merge(
    array($variables['theme_hook_original']),
    $variables['theme_hook_suggestions']
  );
  $dir = drupalpack_get_destination_dir();
  foreach($hooks as $hook) {
    if(!isset($hookdata[$hook])) {
      $hookdata[$hook] = [];
      $filename = str_replace('_', '-', $hook);

      // Get component level JS
      $files = file_scan_directory($dir, "/$filename.js$/");
      foreach(array_keys($files) as $uri) {
        $hookdata[$hook]['scripts'][] = file_create_url($uri);
      }

      // Get component leval CSS
      $files = file_scan_directory($dir, "/$filename.css$/");
      foreach(array_keys($files) as $uri) {
        $hookdata[$hook]['styles'][] = $uri;
      }
      $updatecache = TRUE;
    }
    if(!empty($hookdata[$hook]['scripts'])) {
      foreach($hookdata[$hook]['scripts'] as $scr) {
        $scripts[$variables['theme_hook_original']][] = $scr;
      }
    }
    if(!empty($hookdata[$hook]['styles'])) {
      foreach ($hookdata[$hook]['styles'] as $scr) {
        $styles[$variables['theme_hook_original']][] = $scr;
      }
    }
  }
  if($updatecache) {
    cache_set(__FUNCTION__, $hookdata, 'cache', CACHE_TEMPORARY);
  }

  foreach($scripts[$variables['theme_hook_original']] as $script) {
    drupal_add_js($script, array(
      'type' => 'file',
      'weight' => JS_LIBRARY,
    ));
  }

  foreach($styles[$variables['theme_hook_original']] as $style) {
    drupal_add_css($style, array(
      'type' => 'file',
      'scope' => CSS_THEME,
    ));
  }
}
